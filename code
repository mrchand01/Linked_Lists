class Linked_List:
  
  class __Node:
    
    def __init__(self, val):
      self.val = val 
      self.next = None
      self.prev = None

  def __init__(self):
    self.__header = self.__Node(None)
    self.__trailer = self.__Node(None)
    self.__header.next = self.__trailer  
    self.__trailer.prev = self.__header     
    self.__size = 0 

  def __len__(self):
    return self.__size
       
  def append_element(self, val):
    newest = Linked_List.__Node(val)
    last_item = self.__trailer.prev
    last_item.next = newest
    self.__trailer.prev = newest
    newest.prev = last_item
    newest.next = self.__trailer   
    self.__size += 1    


  def insert_element_at(self, val, index): 
    newest = Linked_List.__Node(val)
    if index < 0 or index >= (self.__size-1): 
      raise IndexError
    elif index <= (self.__size) // 2: #Index is in the first half of the list
      current = self.__header
      for i in range(0, index+1):
        current = current.next
      before_current = current.prev
      before_current.next = newest
      current.prev = newest
      newest.prev = before_current
      newest.next = current
      self.__size += 1
    else: #Index is in the second half of the list
        backwards = self.__trailer
        for i in range(self.__size-1, index+1, -1):
            backwards = backwards.prev
        before_backwards = backwards.prev
        before_backwards.next = newest
        backwards.prev = newest
        newest.prev = before_backwards
        newest.next = backwards
        self.__size += 1
      
  def remove_element_at(self, index):
    if index < 0 or index >= (self.__size):
      raise IndexError
    if (index == 0) and (self.__trailer.next == self.__header): #Josephus Problem
      backwards2 = self.__trailer.prev
      for i in range(0, self.__size-1):
        backwards2 = backwards2.prev
      backwards2 = backwards2.next
      backwards2.prev = None
      self.__size -= 1
    elif index <= (self.__size) // 2: #Index is in the first half of the list
      current = self.__header
      for i in range(0, index+1):
        current = current.next
      before_current = current.prev
      after_current = current.next
      temp2 = current.val
      before_current.next = before_current.next.next
      after_current.prev = before_current
      self.__size -= 1
      return temp2
    else: #Index is in the second half of the list
      backwards = self.__trailer.prev
      for i in range(self.__size-1, index+1, -1):
        backwards = backwards.prev
      before_backwards = backwards.prev
      after_backwards = backwards.next
      temp3 = backwards.val
      before_backwards.next = before_backwards.next.next
      after_backwards.prev = before_backwards
      self.__size -= 1
      return temp3
    

  def get_element_at(self, index):
    if self.__trailer.next == self.__header:#Josephus Problem where Header is already at the end
      current = self.__trailer.prev
      return current.val
    elif index < 0 or index >= self.__size:
      raise IndexError
    elif index <= (self.__size) // 2: #Index is in the first half of the list
      current = self.__header
      for i in range(0, index+1):
        current = current.next
      return current.val
    else: #Index is in the second half of the list
      backwards = self.__trailer
      for i in range(self.__size, index+1, 0):
        backwards = backwards.prev
      return backwards.val
    
  def rotate_left(self):
    if self.__trailer.next == self.__header:#Josephus Problem where Header is already at the end
      backwards = self.__trailer.prev
      for i in range(0, self.__size-1):
        backwards = backwards.prev
      before_trailer2 = self.__trailer.prev
      before_trailer2.next = backwards
      backwards.next = self.__trailer
      self.__trailer.prev = backwards
      backwards.prev = before_trailer2
      before_trailer2.next = backwards
    elif self.__size == 0:
      pass
    elif self.__size == 1:
      current = self.__header.next
      current._prev = None
      self.__header.prev = self.__trailer
      self.__trailer.next = self.__header
      self.__header.next = None
    else: #Non-Josephus problem, Header needs to be put at the end
      current = self.__header.next
      front_list = self.__header.next.next
      current.prev = None
      self.__header.prev = self.__trailer
      self.__trailer.next = self.__header
      self.__header.next = None
      before_trailer = self.__trailer.prev
      before_trailer.next = current
      current.next = self.__trailer
      self.__trailer.prev = current
      current.prev = before_trailer
      front_list.prev = None
      
    

  def __str__(self): 
    if self.__size == 0:
      output = '['
    elif self.__size == 1:
      output = '[ '
      backwards = self.__trailer.prev
      output += str(backwards.val)
    elif self.__trailer.next != self.__header: #Non-Josephus problem string
      output = '[ '
      current = self.__header.next
      while current.next != self.__trailer:
        output += str(current.val)
        output += ', '
        current = current.next
      output += str(current.val)
    else: #Josephus problem string
      output = '[ '
      backwards = self.__trailer.prev
      for i in range(0, self.__size-1):
        backwards = backwards.prev
      while backwards.next != self.__trailer:
        output += str(backwards.val)
        output += ', '
        backwards = backwards.next
      output += str(backwards.val)
    output += ' ]'
    return output
    

  def __iter__(self):
    self.current = self.__header.next
    return self

  def __next__(self):
    if self.current.next == None:
      raise StopIteration
    result = self.current.val
    self.current = self.current.next
    return result
