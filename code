class Linked_List:
  
  class __Node:
    
    def __init__(self, val):
      self.val = val 
      self.next = None
      self.prev = None

  def __init__(self):
    self.__header = self.__Node(None)
    self.__trailer = self.__Node(None)
    self.__header.next = self.__trailer  
    self.__trailer.prev = self.__header     
    self.__size = 0 

  def __len__(self):
    return self.__size
  	 
  def append_element(self, val):
    newest = Linked_List.__Node(val)	
    current = self.__header
    while current.next is not self.__trailer:
      #print(current.val)
      current = current.next
    current.next = newest
    newest.next = self.__trailer
    newest.prev = current
    self.__trailer.prev = newest
    self.__size += 1
    # increase the size of the list by one, and add a
    # node containing val at the new tail position. this 
    # is the only way to add items at the tail position.
    # TODO replace pass with your implementation
    #dont let it take an empty val or list

  def insert_element_at(self, val, index): 
    newest = Linked_List.__Node(val)
    if index < 0 or index >= (self.__size-1): 
      raise IndexError
    else:
  	  current = self.__header
  	  for i in range(0, index+1):
  	    #print(current.val)
  	    current = current.next
  	  before_current = current.prev
  	  before_current.next = newest
  	  current.prev = newest
  	  newest.prev = before_current
  	  newest.next = current
  	  self.__size += 1
  	# assuming the head position (not the header node)
    # is indexed 0, add a node containing val at the 
    # specified index. If the index is not a valid 
    # position within the list, raise an IndexError 
    # exception. This method cannot be used to add an 
    # item at the tail position.
    # TODO replace pass with your implementation

  def remove_element_at(self, index):
    if index < 0 or index >= (self.__size):
      raise IndexError
    if self.__trailer.next != self.__header:
      current = self.__header
      for i in range(0, index+1):
        current = current.next
      before_current = current.prev
      after_current = current.next
      temp = current.val
      before_current.next = before_current.next.next
      after_current.prev = before_current
      self.__size -= 1
    else:
      backwards = self.__trailer.prev
      while backwards.prev != None:
      	backwards = backwards.prev
      temp = backwards.val
      backwards = backwards.next
      backwards.prev = None
      self.__size -= 1
    return temp
    # assuming the head position (not the header node)
    # is indexed 0, remove and return the value stored 
    # in the node at the specified index. If the index 
    # is invalid, raise an IndexError exception.
    # TODO replace pass with your implementation

  def get_element_at(self, index):
    if index < 0 or index >= self.__size:
      raise IndexError
    current = self.__header
    for i in range(0, index+1):
      current = current.next
    return current.val
    # assuming the head position (not the header node)
    # is indexed 0, return the value stored in the node 
    # at the specified index, but do not unlink it from 
    # the list. If the specified index is invalid, raise 
    # an IndexError exception.
    # TODO replace pass with your implementation

  def rotate_left(self):
  	if self.__size == 0:
  	  pass
  	elif self.__size == 1:
  	  current = self.__header.next
  	  current._prev = None
  	  self.__header.prev = self.__trailer
  	  self.__trailer.next = self.__header
  	  self.__header.next = None
  	elif self.__trailer.next != self.__header:
  	  current = self.__header.next
  	  current._prev = None
  	  self.__header.prev = self.__trailer
  	  self.__trailer.next = self.__header
  	  self.__header.next = None
  	  before_trailer = self.__trailer.prev
  	  next_current = current.next
  	  before_trailer.next = current
  	  current.next = self.__trailer
  	  self.__trailer.prev = current
  	  current.prev = before_trailer
  	  next_current.prev = None
  	else:
  	  backwards = self.__trailer.prev
  	  while backwards.prev != None:
  	  	backwards = backwards.prev
  	  before_trailer2 = self.__trailer.prev
  	  backwards_next = backwards.next
  	  before_trailer2.next = backwards
  	  backwards.next = self.__trailer
  	  self.__trailer.prev = backwards
  	  backwards.prev = before_trailer2
    # rotate the list left one position. Conceptual indices
    # should all decrease by one, except for the head, which
    # should become the tail. For example, if the list is
    # [ 5, 7, 9, -4 ], this method should alter it to
    # [ 7, 9, -4, 5 ]. This method should modify the list in
    # place and must not return a value.
    # TODO replace pass with your implementation.

  def __str__(self): 
    if self.__size == 0:
      output = '['
    elif self.__size == 1:
      output = '[ '
      backwards = self.__trailer.prev
      output += str(backwards.val)
    elif self.__trailer.next != self.__header:
      output = '[ '
      current = self.__header.next
      while current.next != self.__trailer:
        output += str(current.val)
        output += ', '
        current = current.next
      output += str(current.val)
    else:
      output = '[ '
      backwards = self.__trailer.prev
      while backwards.prev != None:
      	backwards = backwards.prev
      while backwards.next != self.__trailer:
        output += str(backwards.val)
        output += ', '
        backwards = backwards.next
      output += str(backwards.val)
    output += ' ]'
    return output
    #Linked List object is not iterable error
    # return a string representation of the list's
    # contents. An empty list should appear as [ ].
    # A list with one element should appear as [ 5 ].
    # A list with two elements should appear as [ 5, 7 ].
    # You may assume that the values stored inside of the
    # node objects implement the __str__() method, so you
    # call str(val_object) on them to get their string
    # representations.
    # TODO replace pass with your implementation

  def __iter__(self):
    # Somebody is about to iterate through the set.
    # initialize an index to begin.
    self.current = self.__header
    return self

  def __next__(self):
    # if there are no more values left,
    # terminate the iteration. Python does this automatically
    # when it receives the exception generated here.
    if self.current.next == None:
      raise StopIteration
    # each time a new value is requested (such as
    # a cycle in a for loop), grab the value, up the
    # index to prepare for the next call, and return
    # the value.
    result = self.current.val
    self.current = self.current.next
    return result

if __name__ == '__main__':
  test_list = Linked_List()
  # Test Case 1: Empty List
  # try: 
  # 	test_list.insert_element_at(4,1)
  # 	test_list.remove_element_at(2)
  # 	test_list.get_element_at(2)
  # 	test_list.rotate_left()
  # except IndexError:
  #   print('IndexError')
  # print(str(test_list))

#  Test Case: List with one element
  # try: 
  #   test_list.append_element(3)
  # 	test_list.insert_element_at(4,2)
  # 	test_list.remove_element_at(1)
  # 	test_list.remove_element_at(0)
  # 	test_list.get_element_at(1)
  # 	test_list.rotate_left()
  # except IndexError:
  #   print('IndexError')
  # print(str(test_list))

#  Test Case: List with one element whose value equals None
   # try:
   #   test_list.append_element(None)


  
  # Your test code should go here. Be sure to look at cases
  # when the list is empty, when it has one element, and when 
  # it has several elements. Do the indexed methods raise exceptions
  # when given invalid indices? Do they position items
  # correctly when given valid indices? Does the string
  # representation of your list conform to the specified format?
  # Does removing an element function correctly regardless of that
  # element's location? Does a for loop iterate through your list
  # from head to tail? Your writeup should explain why you chose the
  # test cases. Leave all test cases in your code when submitting.
  # TODO replace pass with your tests
  
